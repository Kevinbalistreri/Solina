{"ast":null,"code":"var _jsxFileName = \"/Users/kevinbalistreri/Desktop/solina-react/src/components/NeuralSphere.jsx\",\n  _s = $RefreshSig$();\n// src/components/NeuralSphere.jsx\nimport React, { useRef } from \"react\";\nimport { Canvas, useFrame } from \"@react-three/fiber\";\nimport { OrbitControls } from \"@react-three/drei\";\nimport * as THREE from \"three\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AnimatedSphere() {\n  _s();\n  const meshRef = useRef();\n  const uniforms = useRef({\n    uTime: {\n      value: 0.0\n    }\n  });\n  useFrame(({\n    clock\n  }) => {\n    if (uniforms.current) {\n      uniforms.current.uTime.value = clock.getElapsedTime();\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    ref: meshRef,\n    scale: [1.8, 1.8, 1.8],\n    children: [/*#__PURE__*/_jsxDEV(\"icosahedronGeometry\", {\n      args: [1, 6]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"shaderMaterial\", {\n      transparent: true,\n      depthWrite: false,\n      uniforms: uniforms.current,\n      vertexShader: `\n          uniform float uTime;\n          varying vec3 vNormal;\n          void main() {\n            vNormal = normal;\n            vec3 pos = position + normal * (sin(uTime + position.y * 3.0) * 0.1);\n            gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n          }\n        `,\n      fragmentShader: `\n          varying vec3 vNormal;\n          void main() {\n            float intensity = pow(0.9 - dot(vNormal, vec3(0.0, 0.0, 1.0)), 4.0);\n            gl_FragColor = vec4(0.0, 0.8, 1.0, 1.0) * intensity;\n          }\n        `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n}\n_s(AnimatedSphere, \"l+XJ8Jdlol/fk6ff39c2hcxatE0=\", false, function () {\n  return [useFrame];\n});\n_c = AnimatedSphere;\nexport default function NeuralSphere() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"absolute inset-0 z-0\",\n    children: /*#__PURE__*/_jsxDEV(Canvas, {\n      camera: {\n        position: [0, 0, 3.5],\n        fov: 65\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"ambientLight\", {\n        intensity: 0.4\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"pointLight\", {\n        position: [10, 10, 10],\n        intensity: 1.2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AnimatedSphere, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(OrbitControls, {\n        enableZoom: false,\n        enablePan: false,\n        autoRotate: true,\n        autoRotateSpeed: 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n_c2 = NeuralSphere;\nvar _c, _c2;\n$RefreshReg$(_c, \"AnimatedSphere\");\n$RefreshReg$(_c2, \"NeuralSphere\");","map":{"version":3,"names":["React","useRef","Canvas","useFrame","OrbitControls","THREE","jsxDEV","_jsxDEV","AnimatedSphere","_s","meshRef","uniforms","uTime","value","clock","current","getElapsedTime","ref","scale","children","args","fileName","_jsxFileName","lineNumber","columnNumber","transparent","depthWrite","vertexShader","fragmentShader","_c","NeuralSphere","className","camera","position","fov","intensity","enableZoom","enablePan","autoRotate","autoRotateSpeed","_c2","$RefreshReg$"],"sources":["/Users/kevinbalistreri/Desktop/solina-react/src/components/NeuralSphere.jsx"],"sourcesContent":["// src/components/NeuralSphere.jsx\nimport React, { useRef } from \"react\";\nimport { Canvas, useFrame } from \"@react-three/fiber\";\nimport { OrbitControls } from \"@react-three/drei\";\nimport * as THREE from \"three\";\n\nfunction AnimatedSphere() {\n  const meshRef = useRef();\n  const uniforms = useRef({ uTime: { value: 0.0 } });\n\n  useFrame(({ clock }) => {\n    if (uniforms.current) {\n      uniforms.current.uTime.value = clock.getElapsedTime();\n    }\n  });\n\n  return (\n    <mesh ref={meshRef} scale={[1.8, 1.8, 1.8]}>\n      <icosahedronGeometry args={[1, 6]} />\n      <shaderMaterial\n        transparent\n        depthWrite={false}\n        uniforms={uniforms.current}\n        vertexShader={`\n          uniform float uTime;\n          varying vec3 vNormal;\n          void main() {\n            vNormal = normal;\n            vec3 pos = position + normal * (sin(uTime + position.y * 3.0) * 0.1);\n            gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n          }\n        `}\n        fragmentShader={`\n          varying vec3 vNormal;\n          void main() {\n            float intensity = pow(0.9 - dot(vNormal, vec3(0.0, 0.0, 1.0)), 4.0);\n            gl_FragColor = vec4(0.0, 0.8, 1.0, 1.0) * intensity;\n          }\n        `}\n      />\n    </mesh>\n  );\n}\n\nexport default function NeuralSphere() {\n  return (\n    <div className=\"absolute inset-0 z-0\">\n      <Canvas camera={{ position: [0, 0, 3.5], fov: 65 }}>\n        <ambientLight intensity={0.4} />\n        <pointLight position={[10, 10, 10]} intensity={1.2} />\n        <AnimatedSphere />\n        <OrbitControls enableZoom={false} enablePan={false} autoRotate autoRotateSpeed={1} />\n      </Canvas>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}